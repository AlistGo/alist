// Code generated by 'yaegi extract github.com/alist-org/alist/v3/internal/errs'. DO NOT EDIT.

package lib

import (
	"github.com/alist-org/alist/v3/internal/errs"
	"reflect"
)

func init() {
	Symbols["github.com/alist-org/alist/v3/internal/errs/errs"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DeleteAdminOrGuest":     reflect.ValueOf(&errs.DeleteAdminOrGuest).Elem(),
		"EmptyPassword":          reflect.ValueOf(&errs.EmptyPassword).Elem(),
		"EmptyToken":             reflect.ValueOf(&errs.EmptyToken).Elem(),
		"EmptyUsername":          reflect.ValueOf(&errs.EmptyUsername).Elem(),
		"IsObjectNotFound":       reflect.ValueOf(errs.IsObjectNotFound),
		"MetaNotFound":           reflect.ValueOf(&errs.MetaNotFound).Elem(),
		"MoveBetweenTwoStorages": reflect.ValueOf(&errs.MoveBetweenTwoStorages).Elem(),
		"NotFile":                reflect.ValueOf(&errs.NotFile).Elem(),
		"NotFolder":              reflect.ValueOf(&errs.NotFolder).Elem(),
		"NotImplement":           reflect.ValueOf(&errs.NotImplement).Elem(),
		"NotSupport":             reflect.ValueOf(&errs.NotSupport).Elem(),
		"ObjectNotFound":         reflect.ValueOf(&errs.ObjectNotFound).Elem(),
		"PermissionDenied":       reflect.ValueOf(&errs.PermissionDenied).Elem(),
		"RelativePath":           reflect.ValueOf(&errs.RelativePath).Elem(),
		"SearchNotAvailable":     reflect.ValueOf(&errs.SearchNotAvailable).Elem(),
		"UploadNotSupported":     reflect.ValueOf(&errs.UploadNotSupported).Elem(),
		"WrongPassword":          reflect.ValueOf(&errs.WrongPassword).Elem(),
	}
}
