// Code generated by 'yaegi extract github.com/aws/aws-sdk-go/service/s3/s3manager'. DO NOT EDIT.

package lib

import (
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"go/constant"
	"go/token"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/aws/aws-sdk-go/service/s3/s3manager/s3manager"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultBatchSize":                        reflect.ValueOf(constant.MakeFromLiteral("100", token.INT, 0)),
		"DefaultDownloadConcurrency":              reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"DefaultDownloadPartSize":                 reflect.ValueOf(constant.MakeFromLiteral("5242880", token.INT, 0)),
		"DefaultUploadConcurrency":                reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"DefaultUploadPartSize":                   reflect.ValueOf(s3manager.DefaultUploadPartSize),
		"ErrDeleteBatchFailCode":                  reflect.ValueOf(constant.MakeFromLiteral("\"DeleteBatchError\"", token.STRING, 0)),
		"GetBucketRegion":                         reflect.ValueOf(s3manager.GetBucketRegion),
		"GetBucketRegionWithClient":               reflect.ValueOf(s3manager.GetBucketRegionWithClient),
		"MaxUploadParts":                          reflect.ValueOf(constant.MakeFromLiteral("10000", token.INT, 0)),
		"MinUploadPartSize":                       reflect.ValueOf(s3manager.MinUploadPartSize),
		"NewBatchDelete":                          reflect.ValueOf(s3manager.NewBatchDelete),
		"NewBatchDeleteWithClient":                reflect.ValueOf(s3manager.NewBatchDeleteWithClient),
		"NewBatchError":                           reflect.ValueOf(s3manager.NewBatchError),
		"NewBufferedReadSeeker":                   reflect.ValueOf(s3manager.NewBufferedReadSeeker),
		"NewBufferedReadSeekerWriteToPool":        reflect.ValueOf(s3manager.NewBufferedReadSeekerWriteToPool),
		"NewDeleteListIterator":                   reflect.ValueOf(s3manager.NewDeleteListIterator),
		"NewDownloader":                           reflect.ValueOf(s3manager.NewDownloader),
		"NewDownloaderWithClient":                 reflect.ValueOf(s3manager.NewDownloaderWithClient),
		"NewPooledBufferedWriterReadFromProvider": reflect.ValueOf(s3manager.NewPooledBufferedWriterReadFromProvider),
		"NewUploader":                             reflect.ValueOf(s3manager.NewUploader),
		"NewUploaderWithClient":                   reflect.ValueOf(s3manager.NewUploaderWithClient),
		"WithDownloaderRequestOptions":            reflect.ValueOf(s3manager.WithDownloaderRequestOptions),
		"WithUploaderRequestOptions":              reflect.ValueOf(s3manager.WithUploaderRequestOptions),

		// type definitions
		"BatchDelete":                    reflect.ValueOf((*s3manager.BatchDelete)(nil)),
		"BatchDeleteIterator":            reflect.ValueOf((*s3manager.BatchDeleteIterator)(nil)),
		"BatchDeleteObject":              reflect.ValueOf((*s3manager.BatchDeleteObject)(nil)),
		"BatchDownloadIterator":          reflect.ValueOf((*s3manager.BatchDownloadIterator)(nil)),
		"BatchDownloadObject":            reflect.ValueOf((*s3manager.BatchDownloadObject)(nil)),
		"BatchError":                     reflect.ValueOf((*s3manager.BatchError)(nil)),
		"BatchUploadIterator":            reflect.ValueOf((*s3manager.BatchUploadIterator)(nil)),
		"BatchUploadObject":              reflect.ValueOf((*s3manager.BatchUploadObject)(nil)),
		"BufferedReadSeeker":             reflect.ValueOf((*s3manager.BufferedReadSeeker)(nil)),
		"BufferedReadSeekerWriteTo":      reflect.ValueOf((*s3manager.BufferedReadSeekerWriteTo)(nil)),
		"BufferedReadSeekerWriteToPool":  reflect.ValueOf((*s3manager.BufferedReadSeekerWriteToPool)(nil)),
		"DeleteListIterator":             reflect.ValueOf((*s3manager.DeleteListIterator)(nil)),
		"DeleteObjectsIterator":          reflect.ValueOf((*s3manager.DeleteObjectsIterator)(nil)),
		"DownloadObjectsIterator":        reflect.ValueOf((*s3manager.DownloadObjectsIterator)(nil)),
		"Downloader":                     reflect.ValueOf((*s3manager.Downloader)(nil)),
		"Error":                          reflect.ValueOf((*s3manager.Error)(nil)),
		"Errors":                         reflect.ValueOf((*s3manager.Errors)(nil)),
		"MultiUploadFailure":             reflect.ValueOf((*s3manager.MultiUploadFailure)(nil)),
		"PooledBufferedReadFromProvider": reflect.ValueOf((*s3manager.PooledBufferedReadFromProvider)(nil)),
		"ReadSeekerWriteTo":              reflect.ValueOf((*s3manager.ReadSeekerWriteTo)(nil)),
		"ReadSeekerWriteToProvider":      reflect.ValueOf((*s3manager.ReadSeekerWriteToProvider)(nil)),
		"UploadInput":                    reflect.ValueOf((*s3manager.UploadInput)(nil)),
		"UploadObjectsIterator":          reflect.ValueOf((*s3manager.UploadObjectsIterator)(nil)),
		"UploadOutput":                   reflect.ValueOf((*s3manager.UploadOutput)(nil)),
		"Uploader":                       reflect.ValueOf((*s3manager.Uploader)(nil)),
		"WriterReadFrom":                 reflect.ValueOf((*s3manager.WriterReadFrom)(nil)),
		"WriterReadFromProvider":         reflect.ValueOf((*s3manager.WriterReadFromProvider)(nil)),

		// interface wrapper definitions
		"_BatchDeleteIterator":       reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator)(nil)),
		"_BatchDownloadIterator":     reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator)(nil)),
		"_BatchUploadIterator":       reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator)(nil)),
		"_MultiUploadFailure":        reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure)(nil)),
		"_ReadSeekerWriteTo":         reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo)(nil)),
		"_ReadSeekerWriteToProvider": reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteToProvider)(nil)),
		"_WriterReadFrom":            reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFrom)(nil)),
		"_WriterReadFromProvider":    reflect.ValueOf((*_github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFromProvider)(nil)),
	}
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator is an interface wrapper for BatchDeleteIterator type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator struct {
	IValue        interface{}
	WDeleteObject func() s3manager.BatchDeleteObject
	WErr          func() error
	WNext         func() bool
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator) DeleteObject() s3manager.BatchDeleteObject {
	return W.WDeleteObject()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator) Err() error {
	return W.WErr()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDeleteIterator) Next() bool {
	return W.WNext()
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator is an interface wrapper for BatchDownloadIterator type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator struct {
	IValue          interface{}
	WDownloadObject func() s3manager.BatchDownloadObject
	WErr            func() error
	WNext           func() bool
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator) DownloadObject() s3manager.BatchDownloadObject {
	return W.WDownloadObject()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator) Err() error {
	return W.WErr()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchDownloadIterator) Next() bool {
	return W.WNext()
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator is an interface wrapper for BatchUploadIterator type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator struct {
	IValue        interface{}
	WErr          func() error
	WNext         func() bool
	WUploadObject func() s3manager.BatchUploadObject
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator) Err() error {
	return W.WErr()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator) Next() bool {
	return W.WNext()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_BatchUploadIterator) UploadObject() s3manager.BatchUploadObject {
	return W.WUploadObject()
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure is an interface wrapper for MultiUploadFailure type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure struct {
	IValue    interface{}
	WCode     func() string
	WError    func() string
	WMessage  func() string
	WOrigErr  func() error
	WUploadID func() string
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure) Code() string {
	return W.WCode()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure) Error() string {
	return W.WError()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure) Message() string {
	return W.WMessage()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure) OrigErr() error {
	return W.WOrigErr()
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_MultiUploadFailure) UploadID() string {
	return W.WUploadID()
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo is an interface wrapper for ReadSeekerWriteTo type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo struct {
	IValue   interface{}
	WRead    func(p []byte) (n int, err error)
	WSeek    func(offset int64, whence int) (int64, error)
	WWriteTo func(w io.Writer) (n int64, err error)
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo) Read(p []byte) (n int, err error) {
	return W.WRead(p)
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo) Seek(offset int64, whence int) (int64, error) {
	return W.WSeek(offset, whence)
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteTo) WriteTo(w io.Writer) (n int64, err error) {
	return W.WWriteTo(w)
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteToProvider is an interface wrapper for ReadSeekerWriteToProvider type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteToProvider struct {
	IValue      interface{}
	WGetWriteTo func(seeker io.ReadSeeker) (r s3manager.ReadSeekerWriteTo, cleanup func())
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_ReadSeekerWriteToProvider) GetWriteTo(seeker io.ReadSeeker) (r s3manager.ReadSeekerWriteTo, cleanup func()) {
	return W.WGetWriteTo(seeker)
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFrom is an interface wrapper for WriterReadFrom type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFrom struct {
	IValue    interface{}
	WReadFrom func(r io.Reader) (n int64, err error)
	WWrite    func(p []byte) (n int, err error)
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFrom) ReadFrom(r io.Reader) (n int64, err error) {
	return W.WReadFrom(r)
}
func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFrom) Write(p []byte) (n int, err error) {
	return W.WWrite(p)
}

// _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFromProvider is an interface wrapper for WriterReadFromProvider type
type _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFromProvider struct {
	IValue       interface{}
	WGetReadFrom func(writer io.Writer) (w s3manager.WriterReadFrom, cleanup func())
}

func (W _github_com_aws_aws_sdk_go_service_s3_s3manager_WriterReadFromProvider) GetReadFrom(writer io.Writer) (w s3manager.WriterReadFrom, cleanup func()) {
	return W.WGetReadFrom(writer)
}
