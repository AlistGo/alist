// Code generated by 'yaegi extract github.com/alist-org/alist/v3/pkg/utils'. DO NOT EDIT.

package lib

import (
	"github.com/alist-org/alist/v3/pkg/utils"
	"reflect"
)

func init() {
	Symbols["github.com/alist-org/alist/v3/pkg/utils/utils"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ClientIP":               reflect.ValueOf(utils.ClientIP),
		"CopyDir":                reflect.ValueOf(utils.CopyDir),
		"CopyFile":               reflect.ValueOf(utils.CopyFile),
		"CopyWithCtx":            reflect.ValueOf(utils.CopyWithCtx),
		"CreateNestedDirectory":  reflect.ValueOf(utils.CreateNestedDirectory),
		"CreateNestedFile":       reflect.ValueOf(utils.CreateNestedFile),
		"CreateTempFile":         reflect.ValueOf(utils.CreateTempFile),
		"DEC":                    reflect.ValueOf(&utils.DEC).Elem(),
		"EncodePath":             reflect.ValueOf(utils.EncodePath),
		"Exists":                 reflect.ValueOf(utils.Exists),
		"Ext":                    reflect.ValueOf(utils.Ext),
		"FixAndCleanPath":        reflect.ValueOf(utils.FixAndCleanPath),
		"GetActualMountPath":     reflect.ValueOf(utils.GetActualMountPath),
		"GetCookie":              reflect.ValueOf(utils.GetCookie),
		"GetFileType":            reflect.ValueOf(utils.GetFileType),
		"GetFullPath":            reflect.ValueOf(utils.GetFullPath),
		"GetMD5Encode":           reflect.ValueOf(utils.GetMD5Encode),
		"GetMimeType":            reflect.ValueOf(utils.GetMimeType),
		"GetObjType":             reflect.ValueOf(utils.GetObjType),
		"GetSHA1Encode":          reflect.ValueOf(utils.GetSHA1Encode),
		"GetSHA256Encode":        reflect.ValueOf(utils.GetSHA256Encode),
		"GetStr":                 reflect.ValueOf(utils.GetStr),
		"InjectQuery":            reflect.ValueOf(utils.InjectQuery),
		"IsBalance":              reflect.ValueOf(utils.IsBalance),
		"IsBool":                 reflect.ValueOf(utils.IsBool),
		"IsCanceled":             reflect.ValueOf(utils.IsCanceled),
		"IsEmailFormat":          reflect.ValueOf(utils.IsEmailFormat),
		"IsLocalIP":              reflect.ValueOf(utils.IsLocalIP),
		"IsLocalIPAddr":          reflect.ValueOf(utils.IsLocalIPAddr),
		"IsSubPath":              reflect.ValueOf(utils.IsSubPath),
		"JoinBasePath":           reflect.ValueOf(utils.JoinBasePath),
		"Json":                   reflect.ValueOf(&utils.Json).Elem(),
		"LimitWriter":            reflect.ValueOf(utils.LimitWriter),
		"Log":                    reflect.ValueOf(&utils.Log).Elem(),
		"MappingName":            reflect.ValueOf(utils.MappingName),
		"MergeErrors":            reflect.ValueOf(utils.MergeErrors),
		"MergeMap":               reflect.ValueOf(utils.MergeMap),
		"MustParseCNTime":        reflect.ValueOf(utils.MustParseCNTime),
		"NewDebounce":            reflect.ValueOf(utils.NewDebounce),
		"NewDebounce2":           reflect.ValueOf(utils.NewDebounce2),
		"NewLimitReadCloser":     reflect.ValueOf(utils.NewLimitReadCloser),
		"NewMultiReadable":       reflect.ValueOf(utils.NewMultiReadable),
		"NewReadCloser":          reflect.ValueOf(utils.NewReadCloser),
		"Parse":                  reflect.ValueOf(utils.Parse),
		"PathAddSeparatorSuffix": reflect.ValueOf(utils.PathAddSeparatorSuffix),
		"PathEqual":              reflect.ValueOf(utils.PathEqual),
		"SafeAtob":               reflect.ValueOf(utils.SafeAtob),
		"SetCookie":              reflect.ValueOf(utils.SetCookie),
		"SetStr":                 reflect.ValueOf(utils.SetStr),
		"SymlinkOrCopyFile":      reflect.ValueOf(utils.SymlinkOrCopyFile),
		"ToString":               reflect.ValueOf(utils.ToString),
		"WriteJsonToFile":        reflect.ValueOf(utils.WriteJsonToFile),

		// type definitions
		"CloseFunc":     reflect.ValueOf((*utils.CloseFunc)(nil)),
		"MultiReadable": reflect.ValueOf((*utils.MultiReadable)(nil)),
		"ReadCloser":    reflect.ValueOf((*utils.ReadCloser)(nil)),
	}
}
