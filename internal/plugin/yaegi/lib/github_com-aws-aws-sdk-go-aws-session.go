// Code generated by 'yaegi extract github.com/aws/aws-sdk-go/aws/session'. DO NOT EDIT.

package lib

import (
	"github.com/aws/aws-sdk-go/aws/session"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/aws/aws-sdk-go/aws/session/session"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultSharedConfigProfile":             reflect.ValueOf(constant.MakeFromLiteral("\"default\"", token.STRING, 0)),
		"EnvProviderName":                        reflect.ValueOf(constant.MakeFromLiteral("\"EnvConfigCredentials\"", token.STRING, 0)),
		"ErrCodeLoadClientTLSCert":               reflect.ValueOf(constant.MakeFromLiteral("\"LoadClientTLSCertError\"", token.STRING, 0)),
		"ErrCodeLoadCustomCABundle":              reflect.ValueOf(constant.MakeFromLiteral("\"LoadCustomCABundleError\"", token.STRING, 0)),
		"ErrCodeSharedConfig":                    reflect.ValueOf(constant.MakeFromLiteral("\"SharedConfigErr\"", token.STRING, 0)),
		"ErrSharedConfigECSContainerEnvVarEmpty": reflect.ValueOf(&session.ErrSharedConfigECSContainerEnvVarEmpty).Elem(),
		"ErrSharedConfigInvalidCredSource":       reflect.ValueOf(&session.ErrSharedConfigInvalidCredSource).Elem(),
		"ErrSharedConfigSourceCollision":         reflect.ValueOf(&session.ErrSharedConfigSourceCollision).Elem(),
		"Must":                                   reflect.ValueOf(session.Must),
		"New":                                    reflect.ValueOf(session.New),
		"NewSession":                             reflect.ValueOf(session.NewSession),
		"NewSessionWithOptions":                  reflect.ValueOf(session.NewSessionWithOptions),
		"SharedConfigDisable":                    reflect.ValueOf(session.SharedConfigDisable),
		"SharedConfigEnable":                     reflect.ValueOf(session.SharedConfigEnable),
		"SharedConfigStateFromEnv":               reflect.ValueOf(session.SharedConfigStateFromEnv),
		"WebIdentityEmptyRoleARNErr":             reflect.ValueOf(&session.WebIdentityEmptyRoleARNErr).Elem(),
		"WebIdentityEmptyTokenFilePathErr":       reflect.ValueOf(&session.WebIdentityEmptyTokenFilePathErr).Elem(),

		// type definitions
		"AssumeRoleTokenProviderNotSetError": reflect.ValueOf((*session.AssumeRoleTokenProviderNotSetError)(nil)),
		"CredentialRequiresARNError":         reflect.ValueOf((*session.CredentialRequiresARNError)(nil)),
		"CredentialsProviderOptions":         reflect.ValueOf((*session.CredentialsProviderOptions)(nil)),
		"Options":                            reflect.ValueOf((*session.Options)(nil)),
		"Session":                            reflect.ValueOf((*session.Session)(nil)),
		"SharedConfigAssumeRoleError":        reflect.ValueOf((*session.SharedConfigAssumeRoleError)(nil)),
		"SharedConfigLoadError":              reflect.ValueOf((*session.SharedConfigLoadError)(nil)),
		"SharedConfigProfileNotExistsError":  reflect.ValueOf((*session.SharedConfigProfileNotExistsError)(nil)),
		"SharedConfigState":                  reflect.ValueOf((*session.SharedConfigState)(nil)),
	}
}
